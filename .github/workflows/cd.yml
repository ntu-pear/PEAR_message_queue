# This workflow will build and deploy RabbitMQ message queue service
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: RabbitMQ Message Queue CD

on:
  push:
    branches: ["main", "staging"]

permissions:
  contents: read

jobs:
  deploy-staging:
    if: github.ref == 'refs/heads/main'
    runs-on: [self-hosted, Linux, X64]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Pre-deployment setup
        run: |
          echo "üöÄ Starting RabbitMQ deployment to STAGING"
          echo "Current time: $(date)"
      
      - name: Build and push new image
        run: |
          echo "üî® Building new RabbitMQ image..."
          docker build --no-cache -f Dockerfile -t rabbitmq_service_dev .
          docker tag rabbitmq_service_dev:latest localhost:5000/rabbitmq_service_dev:latest
          docker push localhost:5000/rabbitmq_service_dev:latest
          sleep 5
      
      - name: Rolling update instead of recreation
        run: |
          echo "üîÑ Performing rolling update of RabbitMQ..."
          
          if kubectl get statefulset rabbitmq-stg &> /dev/null; then
            echo "Existing RabbitMQ found - performing rolling update"
            
            # Configure rolling update strategy
            kubectl patch statefulset rabbitmq-stg -p '{
              "spec": {
                "updateStrategy": {
                  "type": "RollingUpdate",
                  "rollingUpdate": {"partition": 0}
                }
              }
            }'
            
            # Update the image
            kubectl set image statefulset/rabbitmq-stg localhost:5000/rabbitmq_service_dev:latest
            
            echo "Rolling update initiated - pods will restart one by one"
            
          else
            echo "No existing RabbitMQ - deploying fresh"
            kubectl apply -f k8s/deployment-stg.yaml
          fi
      
      - name: Monitor rolling update
        run: |
          echo "‚è≥ Monitoring rolling update progress..."
          
          # Wait for rolling update to complete
          kubectl rollout status statefulset/rabbitmq-stg --timeout=300s
          
          echo "‚úÖ Rolling update completed"
      
      - name: Wait for RabbitMQ to stabilize
        run: |
          echo "üîç Waiting for RabbitMQ to stabilize..."
          
          # Wait for all pods to be ready
          kubectl wait --for=condition=ready pod -l app=rabbitmq-stg --timeout=300s
          
          # Additional wait for RabbitMQ cluster to form
          sleep 60
          
          echo "üè• Verifying RabbitMQ health..."
          kubectl exec -l app=rabbitmq-stg -- rabbitmq-diagnostics status || echo "Health check completed"